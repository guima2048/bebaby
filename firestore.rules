rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 7, 25);
    }

    // Regras para usuários
    match /users/{userId} {
      // Permitir leitura se o usuário está autenticado e é o próprio usuário
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Permitir criação de novos usuários
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['username', 'email', 'birthdate', 'state', 'city', 'userType', 'createdAt', 'status', 'premium'])
        && request.resource.data.username is string
        && request.resource.data.email is string
        && request.resource.data.birthdate is string
        && request.resource.data.state is string
        && request.resource.data.city is string
        && request.resource.data.userType in ['sugar_baby', 'sugar_daddy']
        && request.resource.data.createdAt is string
        && request.resource.data.status == 'active'
        && request.resource.data.premium == false;
      
      // Permitir atualização se o usuário está autenticado e é o próprio usuário
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Permitir exclusão se o usuário está autenticado e é o próprio usuário
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Regras para verificação de unicidade de username e email
    match /users/{userId} {
      // Permitir consultas para verificar unicidade
      allow list: if request.auth != null 
        && (request.query.limit <= 10)
        && (request.query.filters == null || 
            (request.query.filters[0].fieldPath in ['username', 'email'] 
             && request.query.filters[0].op in ['==']));
    }
    
    // Regras para outros documentos (fotos, mensagens, etc.)
    match /{document=**} {
      // Permitir leitura e escrita apenas para usuários autenticados
      allow read, write: if request.auth != null;
    }
  }
}