const admin = require('firebase-admin');
const serviceAccount = require('../serviceAccountKey.json');

// Inicializar Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    storageBucket: 'bebaby-56627.appspot.com'
  });
}

const db = admin.firestore();

// Mapeamento de tipos de usu√°rio para g√™nero
const USER_TYPE_GENDER_MAP = {
  'sugar_baby': 'female',    // Mulher que busca benef√≠cios
  'sugar_daddy': 'male',     // Homem que oferece benef√≠cios
  'sugar_mommy': 'female',   // Mulher que oferece benef√≠cios
  'sugar_babyboy': 'male'    // Homem que busca benef√≠cios
};

// Mapeamento de tipos de usu√°rio para prefer√™ncias padr√£o
const USER_TYPE_LOOKING_FOR_MAP = {
  'sugar_baby': 'male',      // Sugar Baby procura homens
  'sugar_daddy': 'female',   // Sugar Daddy procura mulheres
  'sugar_mommy': 'male',     // Sugar Mommy procura homens
  'sugar_babyboy': 'female'  // Sugar Babyboy procura mulheres
};

async function migrateUsers() {
  console.log('üöÄ Iniciando migra√ß√£o de tipos de usu√°rio...');
  
  try {
    const usersRef = db.collection('users');
    const snapshot = await usersRef.get();
    
    console.log(`üìä Encontrados ${snapshot.size} usu√°rios para migrar`);
    
    let migrated = 0;
    let errors = 0;
    
    for (const doc of snapshot.docs) {
      const userData = doc.data();
      const userId = doc.id;
      
      console.log(`\nüë§ Processando usu√°rio: ${userData.username || userId}`);
      
      const updates = {};
      let hasUpdates = false;
      
      // Verificar se precisa adicionar g√™nero
      if (!userData.gender && userData.userType) {
        const gender = USER_TYPE_GENDER_MAP[userData.userType];
        if (gender) {
          updates.gender = gender;
          hasUpdates = true;
          console.log(`  ‚úÖ Adicionando g√™nero: ${gender}`);
        }
      }
      
      // Verificar se precisa adicionar lookingFor
      if (!userData.lookingFor && userData.userType) {
        const lookingFor = USER_TYPE_LOOKING_FOR_MAP[userData.userType];
        if (lookingFor) {
          updates.lookingFor = lookingFor;
          hasUpdates = true;
          console.log(`  ‚úÖ Adicionando prefer√™ncia: ${lookingFor}`);
        }
      }
      
      // Aplicar atualiza√ß√µes se necess√°rio
      if (hasUpdates) {
        try {
          await doc.ref.update(updates);
          migrated++;
          console.log(`  ‚úÖ Usu√°rio migrado com sucesso`);
        } catch (error) {
          errors++;
          console.error(`  ‚ùå Erro ao migrar usu√°rio ${userId}:`, error.message);
        }
      } else {
        console.log(`  ‚è≠Ô∏è Usu√°rio j√° possui todos os campos necess√°rios`);
      }
    }
    
    console.log(`\nüéâ Migra√ß√£o conclu√≠da!`);
    console.log(`‚úÖ Usu√°rios migrados: ${migrated}`);
    console.log(`‚ùå Erros: ${errors}`);
    console.log(`üìä Total processado: ${snapshot.size}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
  }
}

// Executar migra√ß√£o
migrateUsers()
  .then(() => {
    console.log('‚úÖ Script conclu√≠do');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro no script:', error);
    process.exit(1);
  }); 